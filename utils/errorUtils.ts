// Tipos de errores que puede devolver la API
export interface ApiError {
  message: string
  type: "validation" | "duplicate" | "network" | "server" | "auth" | "unknown"
  field?: string
}

// Mapeo de errores espec√≠ficos a mensajes amigables
const ERROR_MESSAGES: Record<string, ApiError> = {
  // Errores de duplicados
  "El nombre de usuario ya est√° en uso": {
    message: "Este nombre de usuario ya est√° registrado. Por favor, elige otro.",
    type: "duplicate",
    field: "nombreUsuario",
  },
  "El correo electr√≥nico ya est√° registrado": {
    message: "Ya existe una cuenta con este correo electr√≥nico.",
    type: "duplicate",
    field: "correo",
  },
  "El nombre del comercio ya existe": {
    message: "Ya existe un comercio con este nombre. Por favor, elige otro.",
    type: "duplicate",
    field: "nombre",
  },

  // Errores de validaci√≥n
  "The Uid field is required": {
    message: "Error de autenticaci√≥n. Por favor, inicia sesi√≥n nuevamente.",
    type: "auth",
  },
  "El campo Correo es requerido": {
    message: "El correo electr√≥nico es obligatorio.",
    type: "validation",
    field: "correo",
  },
  "El campo NombreUsuario es requerido": {
    message: "El nombre de usuario es obligatorio.",
    type: "validation",
    field: "nombreUsuario",
  },

  // Errores de red
  "Failed to fetch": {
    message: "No se pudo conectar con el servidor. Verifica tu conexi√≥n a internet.",
    type: "network",
  },
  "Network error": {
    message: "Error de conexi√≥n. Por favor, int√©ntalo de nuevo.",
    type: "network",
  },

  // Errores del servidor
  "Internal Server Error": {
    message: "Error interno del servidor. Por favor, int√©ntalo m√°s tarde.",
    type: "server",
  },
  "Service Unavailable": {
    message: "El servicio no est√° disponible temporalmente.",
    type: "server",
  },

  // Errores de autorizaci√≥n
  Unauthorized: {
    message: "No tienes permisos para realizar esta acci√≥n.",
    type: "auth",
  },
  Forbidden: {
    message: "Acceso denegado.",
    type: "auth",
  },

  // Errores de no encontrado
  "Usuario no encontrado": {
    message: "El usuario solicitado no existe.",
    type: "validation",
  },
  "Comercio no encontrado": {
    message: "El comercio solicitado no existe.",
    type: "validation",
  },
}

// Funci√≥n para mapear errores de la API a mensajes amigables
export function mapApiError(errorMessage: string): ApiError {
  // Buscar coincidencia exacta
  if (ERROR_MESSAGES[errorMessage]) {
    return ERROR_MESSAGES[errorMessage]
  }

  // Buscar coincidencias parciales para errores din√°micos
  for (const [key, value] of Object.entries(ERROR_MESSAGES)) {
    if (errorMessage.includes(key) || key.includes(errorMessage)) {
      return value
    }
  }

  // Detectar patrones comunes
  if (
    errorMessage.toLowerCase().includes("ya existe") ||
    errorMessage.toLowerCase().includes("already exists") ||
    errorMessage.toLowerCase().includes("ya est√° en uso")
  ) {
    return {
      message: "Este valor ya est√° en uso. Por favor, elige otro.",
      type: "duplicate",
    }
  }

  if (
    errorMessage.toLowerCase().includes("requerido") ||
    errorMessage.toLowerCase().includes("required") ||
    errorMessage.toLowerCase().includes("obligatorio")
  ) {
    return {
      message: "Por favor, completa todos los campos obligatorios.",
      type: "validation",
    }
  }

  if (errorMessage.toLowerCase().includes("timeout") || errorMessage.toLowerCase().includes("tiempo")) {
    return {
      message: "La operaci√≥n tard√≥ demasiado. Por favor, int√©ntalo de nuevo.",
      type: "network",
    }
  }

  // Error gen√©rico
  return {
    message: errorMessage || "Ha ocurrido un error inesperado. Por favor, int√©ntalo de nuevo.",
    type: "unknown",
  }
}

// Funci√≥n para obtener el icono seg√∫n el tipo de error
export function getErrorIcon(type: ApiError["type"]): string {
  switch (type) {
    case "validation":
      return "‚ö†Ô∏è"
    case "duplicate":
      return "üîÑ"
    case "network":
      return "üåê"
    case "server":
      return "üîß"
    case "auth":
      return "üîí"
    default:
      return "‚ùå"
  }
}

// Funci√≥n para obtener el color del toast seg√∫n el tipo de error
export function getErrorVariant(type: ApiError["type"]): "destructive" | "default" {
  switch (type) {
    case "network":
    case "server":
      return "default" // Menos alarmante para errores t√©cnicos
    default:
      return "destructive"
  }
}
